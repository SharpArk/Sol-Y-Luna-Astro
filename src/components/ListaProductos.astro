---
interface Producto {
  id: number;
  name: string;
  description_short: string;
  image: Image[];
  sizes: Size[];
}

interface Image {
  image: string;
  product: string;
}

interface Size {
  id: number;
  size: string;
  price: number;
  product: string;
}

const data = await fetch("http://localhost:8000/store/products/");
const productos: Producto[] = await data.json();
console.log(productos);
---

{
  productos.map((producto: Producto) => (
    <a href={`/Tienda/producto/${producto.id}`}>
      <article
        class="w-[250px] h-[300px] bg-[#fef1f7] rounded-3xl cursor-pointer relative"
        data-img={producto.image[0]}
      >
        <div>
          <img
            class="w-[250px] h-[200px] object-cover rounded-t-3xl"
            src="/productos/img-1.jpg"
          />
        </div>
        <div class="text-black flex flex-col items-center justify-start p-2">
          <p>{producto.name}</p>
          <p>{producto.description_short}</p>
          <p>{producto.sizes[0].price}</p>
        </div>
      </article>
    </a>
  ))
}

<div class="w-[50%] fixed right-0 top-0 h-screen">
  <div
    class="absolute inset-0 bg-gradient-to-l from-[#fe68a6] to-[#343446] pointer-events-none animate-pulse efect"
  >
  </div>
</div>

<style>
  .img {
    mask-image: linear-gradient(to left, #000 80%, transparent);
    transition: opacity 0.3s ease;
  }

  article::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-image: url("/hover/hover-article.svg");
    background-size: cover;
    width: 0;
    height: 0;
    opacity: 0;
    transition: 0.3s ease;
  }

  article:hover::after {
    width: calc(100% + 15px);
    height: calc(100% + 15px);
    opacity: 1;
  }
</style>

<script>
  function initHoverEffect() {
    const imgs = document.querySelectorAll<HTMLImageElement>(".img");
    const articles = document.querySelectorAll<HTMLElement>("article");
    const gradient = document.querySelector<HTMLElement>(".efect");
    let timeoutId: number | null = null;

    articles.forEach((article) => {
      article.replaceWith(article.cloneNode(true));
    });

    const updatedArticles = document.querySelectorAll<HTMLElement>("article");

    updatedArticles.forEach((article, i) => {
      const image = imgs[i];

      article.addEventListener("mouseenter", () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = null;
        }
        imgs.forEach((img) => img.classList.add("opacity-0"));
        image.classList.remove("opacity-0");
        if (gradient) {
          gradient.classList.add("opacity-0");
        }
      });

      article.addEventListener("mouseleave", () => {
        if (gradient) {
          gradient.classList.remove("opacity-0");
        }
        image.classList.add("opacity-0");
      });
    });
  }

  initHoverEffect();
  document.addEventListener("astro:after-swap", initHoverEffect);
</script>
