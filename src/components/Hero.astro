---
interface Producto {
  id: number;
  name: string;
  description_short: string;
  description_long: String;
  images: Images[];
  sizes: Size[];
}

interface Images {
  image: string;
  product_id: number;
}

interface Size {
  id: number;
  size: string;
  price: number;
  product: string;
}

import { PUBLIC_API_URL } from "astro:env/client";
import { API_URL } from "astro:env/server";

const data = await fetch(`${API_URL}/store/product4/`);
const productos: Producto[] = await data.json();
---

<section class="w-screen h-screen flex">
  {
    productos.map((product: Producto) => (
      <div>
        <div>
          <img
            class={`h-screen w-[40vw] object-cover absolute z-[${product.id}] right-0 img`}
            src={`${API_URL}/${product.images[0].image}`}
            data-img={`${API_URL}/${product.images[0].image}`}
            id={`img-${product.id}`}
          />
        </div>
        <div class="txt-div relative h-screen" id={`div-${product.id}`}>
          <div class="absolute w-[50vw] top-1/2 transform translate-y-[-50%] left-[5vw] flex flex-col gap-2">
            <h1
              class={`txt-${product.id} text-8xl uppercase title w-fit relative`}
            >
              {product.name}
            </h1>
            <p>{product.description_short}</p>
            <p>{product.description_long}</p>
            <div class="flex gap-5">
              {product.sizes.map((size: Size) => (
                <p class="price">{size.size}</p>
              ))}
            </div>
            <p>{product.sizes[0].price}</p>
            <a
              class="w-fit p-4 pt-2 pb-2 bg-gradient-to-l from-[#6a75ea] to-[#cb0b47] rounded-full uppercase transition-shadow hover:shadow-sm"
              href={`/Tienda/producto/${product.id}`}
            >
              Ver Mas
            </a>
          </div>
        </div>
      </div>
    ))
  }
  {
    productos.slice(1).map((producto: Producto) => (
      <article>
        <h1 />
      </article>
    ))
  }
</section>

<style>
  img {
    mask-image: linear-gradient(to left, #000 70%, transparent);
  }

  .title::after {
    content: "";
    width: 100%;
    height: 100%;
    background-color: #6a75ea;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    filter: blur(25px);
    border-radius: 9999px;
  }

  a:hover {
    box-shadow: 0.2rem 0.2rem 0.2rem rgba(0, 0, 0, 0.3);
  }
</style>

<script>
  const initImagesAndDivs = () => {
    const allImages = document.querySelectorAll(".img");
    const allDivs = document.querySelectorAll(".txt-div");

    if (allImages.length === 0 || allDivs.length === 0) {
      console.warn("No se encontraron elementos .img o .txt-div aÃºn.");
      return;
    }

    const activeImage = allImages[0].id;
    const activeDiv = allDivs[0].id;

    allImages.forEach((e) => {
      if (e.id !== activeImage) {
        e.classList.add("opacity-0");
      }
    });

    allDivs.forEach((e) => {
      if (e.id !== activeDiv) {
        e.classList.add("hidden");
      }
    });
  };

  const safeInit = () => {
    setTimeout(() => {
      initImagesAndDivs();
    }, 100);
  };

  document.addEventListener("astro:after-swap", () => {
    safeInit();
  });

  safeInit();
</script>
